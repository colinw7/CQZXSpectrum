#include <CEvent.h>

#if 0
static int
key_map_lower[8][5] = {
  { CKEY_TYPE_Shift_L, CKEY_TYPE_z        , CKEY_TYPE_x, CKEY_TYPE_c , CKEY_TYPE_v, },
  { CKEY_TYPE_a      , CKEY_TYPE_s        , CKEY_TYPE_d, CKEY_TYPE_f , CKEY_TYPE_g, },
  { CKEY_TYPE_q      , CKEY_TYPE_w        , CKEY_TYPE_e, CKEY_TYPE_r , CKEY_TYPE_t, },
  { CKEY_TYPE_1      , CKEY_TYPE_2        , CKEY_TYPE_3, CKEY_TYPE_4 , CKEY_TYPE_5, },
  { CKEY_TYPE_0      , CKEY_TYPE_9        , CKEY_TYPE_8, CKEY_TYPE_7 , CKEY_TYPE_6, },
  { CKEY_TYPE_p      , CKEY_TYPE_o        , CKEY_TYPE_i, CKEY_TYPE_u , CKEY_TYPE_y, },
  { CKEY_TYPE_Return , CKEY_TYPE_l        , CKEY_TYPE_k, CKEY_TYPE_j , CKEY_TYPE_h, },
  { CKEY_TYPE_Space  , CKEY_TYPE_Control_L, CKEY_TYPE_m, CKEY_TYPE_n , CKEY_TYPE_b, },
};

static int
key_map_upper[8][5] = {
  { CKEY_TYPE_Shift_R   , CKEY_TYPE_Z         , CKEY_TYPE_X         , CKEY_TYPE_C     , CKEY_TYPE_V        , },
  { CKEY_TYPE_A         , CKEY_TYPE_S         , CKEY_TYPE_D         , CKEY_TYPE_F     , CKEY_TYPE_G        , },
  { CKEY_TYPE_Q         , CKEY_TYPE_W         , CKEY_TYPE_E         , CKEY_TYPE_R     , CKEY_TYPE_T        , },
  { CKEY_TYPE_exclam    , CKEY_TYPE_at        , CKEY_TYPE_numbersign, CKEY_TYPE_dollar, CKEY_TYPE_percent  , },
  { CKEY_TYPE_underscore, CKEY_TYPE_parenright, CKEY_TYPE_parenleft , CKEY_TYPE_comma , CKEY_TYPE_ampersand, },
  { CKEY_TYPE_P         , CKEY_TYPE_O         , CKEY_TYPE_I         , CKEY_TYPE_U     , CKEY_TYPE_Y        , },
  { CKEY_TYPE_Return    , CKEY_TYPE_L         , CKEY_TYPE_K         , CKEY_TYPE_J     , CKEY_TYPE_H        , },
  { CKEY_TYPE_Delete    , CKEY_TYPE_Control_R , CKEY_TYPE_M         , CKEY_TYPE_N     , CKEY_TYPE_B        , },
};
#endif

struct KeyPos {
  int row, col;
};

struct KeyDef {
  int    keycode;
  KeyPos pos[5];
};

static KeyDef
key_map[] = {
  { CKEY_TYPE_Shift_L  , { } },
  { CKEY_TYPE_Shift_R  , { } },
  { CKEY_TYPE_Control_L, { } },
  { CKEY_TYPE_Control_R, { } },

  { CKEY_TYPE_Return  , { {7, 1} } },
  { CKEY_TYPE_Space   , { {8, 1} } },
  { CKEY_TYPE_Escape  , { {8, 1}, {1, 1} } },

  { CKEY_TYPE_a           , { {2, 1} } },
  { CKEY_TYPE_A           , { {2, 1}, {1, 1} } },
  { CKEY_TYPE_b           , { {8, 5} } },
  { CKEY_TYPE_B           , { {8, 5}, {1, 1} } },
  { CKEY_TYPE_Asterisk    , { {8, 5}, {8, 2} } },
  { CKEY_TYPE_c           , { {1, 4} } },
  { CKEY_TYPE_C           , { {1, 4}, {1, 1} } },
  { CKEY_TYPE_Question    , { {1, 4}, {8, 2} } },
  { CKEY_TYPE_d           , { {2, 3} } },
  { CKEY_TYPE_D           , { {2, 3}, {1, 1} } },
  { CKEY_TYPE_e           , { {3, 3} } },
  { CKEY_TYPE_E           , { {3, 3}, {1, 1} } },
  { CKEY_TYPE_f           , { {2, 4} } },
  { CKEY_TYPE_F           , { {2, 4}, {1, 1} } },
  { CKEY_TYPE_g           , { {2, 5} } },
  { CKEY_TYPE_G           , { {2, 5}, {1, 1} } },
  { CKEY_TYPE_h           , { {7, 5} } },
  { CKEY_TYPE_H           , { {7, 5}, {1, 1} } },
  { CKEY_TYPE_AsciiTilde  , { {7, 5}, {8, 2} } },
  { CKEY_TYPE_i           , { {6, 3} } },
  { CKEY_TYPE_I           , { {6, 3}, {1, 1} } },
  { CKEY_TYPE_j           , { {7, 4} } },
  { CKEY_TYPE_J           , { {7, 4}, {1, 1} } },
  { CKEY_TYPE_Minus       , { {7, 4}, {8, 2} } },
  { CKEY_TYPE_k           , { {7, 3} } },
  { CKEY_TYPE_K           , { {7, 3}, {1, 1} } },
  { CKEY_TYPE_Plus        , { {7, 3}, {8, 2} } },
  { CKEY_TYPE_l           , { {7, 2} } },
  { CKEY_TYPE_L           , { {7, 2}, {1, 1} } },
  { CKEY_TYPE_Equal       , { {7, 2}, {8, 2} } },
  { CKEY_TYPE_m           , { {8, 3} } },
  { CKEY_TYPE_M           , { {8, 3}, {1, 1} } },
  { CKEY_TYPE_Period      , { {8, 3}, {8, 2} } },
  { CKEY_TYPE_n           , { {8, 4} } },
  { CKEY_TYPE_N           , { {8, 4}, {1, 1} } },
  { CKEY_TYPE_Comma       , { {8, 4}, {8, 2} } },
  { CKEY_TYPE_o           , { {6, 2} } },
  { CKEY_TYPE_O           , { {6, 2}, {1, 1} } },
  { CKEY_TYPE_Semicolon   , { {6, 2}, {8, 2} } },
  { CKEY_TYPE_p           , { {6, 1} } },
  { CKEY_TYPE_P           , { {6, 1}, {1, 1} } },
  { CKEY_TYPE_QuoteDbl    , { {6, 1}, {8, 2} } },
  { CKEY_TYPE_q           , { {3, 1} } },
  { CKEY_TYPE_Q           , { {3, 1}, {1, 1} } },
  { CKEY_TYPE_r           , { {3, 4} } },
  { CKEY_TYPE_R           , { {3, 4}, {1, 1} } },
  { CKEY_TYPE_Less        , { {3, 4}, {8, 2} } },
  { CKEY_TYPE_s           , { {2, 2} } },
  { CKEY_TYPE_S           , { {2, 2}, {1, 1} } },
  { CKEY_TYPE_Greater     , { {2, 2}, {8, 2} } },
  { CKEY_TYPE_t           , { {3, 5} } },
  { CKEY_TYPE_T           , { {3, 5}, {1, 1} } },
  { CKEY_TYPE_u           , { {6, 4} } },
  { CKEY_TYPE_U           , { {6, 4}, {1, 1} } },
  { CKEY_TYPE_BracketRight, { {6, 4}, {8, 2} } },
  { CKEY_TYPE_v           , { {1, 5} } },
  { CKEY_TYPE_V           , { {1, 5}, {1, 1} } },
  { CKEY_TYPE_w           , { {3, 2} } },
  { CKEY_TYPE_W           , { {3, 2}, {1, 1} } },
  { CKEY_TYPE_x           , { {1, 3} } },
  { CKEY_TYPE_X           , { {1, 3}, {1, 1} } },
  { CKEY_TYPE_QuoteLeft   , { {1, 3}, {8, 2} } }, // pound
  { CKEY_TYPE_y           , { {6, 5} } },
  { CKEY_TYPE_Y           , { {6, 5}, {1, 1} } },
  { CKEY_TYPE_BracketLeft , { {6, 5}, {8, 2} } },
  { CKEY_TYPE_z           , { {1, 2} } },
  { CKEY_TYPE_Z           , { {1, 2}, {1, 1} } },
  { CKEY_TYPE_Colon       , { {1, 2}, {8, 2} } },

  { CKEY_TYPE_1           , { {4, 1} } },
  { CKEY_TYPE_Exclam      , { {4, 1}, {8, 2} } },
  { CKEY_TYPE_2           , { {4, 2} } },
  { CKEY_TYPE_At          , { {4, 2}, {8, 2} } },
  { CKEY_TYPE_3           , { {4, 3} } },
  { CKEY_TYPE_QuoteLeft   , { {4, 3}, {8, 2} } }, // pound
  { CKEY_TYPE_4           , { {4, 4} } },
  { CKEY_TYPE_Dollar      , { {4, 4}, {8, 2} } },
  { CKEY_TYPE_5           , { {4, 5} } },
  { CKEY_TYPE_Left        , { {4, 5}, {1, 1} } },
  { CKEY_TYPE_Percent     , { {4, 5}, {8, 2} } },
  { CKEY_TYPE_6           , { {5, 5} } },
  { CKEY_TYPE_Down        , { {5, 5}, {1, 1} } },
  { CKEY_TYPE_Ampersand   , { {5, 5}, {8, 2} } },
  { CKEY_TYPE_7           , { {5, 4} } },
  { CKEY_TYPE_Up          , { {5, 4}, {1, 1} } },
  { CKEY_TYPE_Comma       , { {5, 4}, {8, 2} } },
  { CKEY_TYPE_8           , { {5, 3} } },
  { CKEY_TYPE_Right       , { {5, 3}, {1, 1} } },
  { CKEY_TYPE_ParenLeft   , { {5, 3}, {8, 2} } },
  { CKEY_TYPE_9           , { {5, 2} } },
  { CKEY_TYPE_ParenRight  , { {5, 2}, {8, 2} } },
  { CKEY_TYPE_0           , { {5, 1} } },
  { CKEY_TYPE_DEL         , { {5, 1}, {1, 1} } },
  { CKEY_TYPE_BackSpace   , { {5, 1}, {1, 1} } },
  { CKEY_TYPE_Underscore  , { {5, 1}, {8, 2} } },
};

static uint key_map_size =
  sizeof(key_map)/sizeof(key_map[0]);

#if 0
struct KeycodePair {
  int keycode1;
  int keycode2;
};

static KeycodePair
lower_upper_map[] = {
 { CKEY_TYPE_grave       , CKEY_TYPE_AsciiTilde   },
 { CKEY_TYPE_1           , CKEY_TYPE_Exclam       },
 { CKEY_TYPE_2           , CKEY_TYPE_At           },
 { CKEY_TYPE_3           , CKEY_TYPE_numbersign   },
 { CKEY_TYPE_4           , CKEY_TYPE_dollar       },
 { CKEY_TYPE_5           , CKEY_TYPE_percent      },
 { CKEY_TYPE_6           , CKEY_TYPE_asciicircum  },
 { CKEY_TYPE_7           , CKEY_TYPE_ampersand    },
 { CKEY_TYPE_8           , CKEY_TYPE_asterisk     },
 { CKEY_TYPE_9           , CKEY_TYPE_parenleft    },
 { CKEY_TYPE_0           , CKEY_TYPE_parenright   },
 { CKEY_TYPE_minus       , CKEY_TYPE_underscore   },
 { CKEY_TYPE_equal       , CKEY_TYPE_plus         },
 { CKEY_TYPE_q           , CKEY_TYPE_Q            },
 { CKEY_TYPE_w           , CKEY_TYPE_W            },
 { CKEY_TYPE_e           , CKEY_TYPE_E            },
 { CKEY_TYPE_r           , CKEY_TYPE_R            },
 { CKEY_TYPE_t           , CKEY_TYPE_T            },
 { CKEY_TYPE_y           , CKEY_TYPE_Y            },
 { CKEY_TYPE_u           , CKEY_TYPE_U            },
 { CKEY_TYPE_i           , CKEY_TYPE_I            },
 { CKEY_TYPE_o           , CKEY_TYPE_O            },
 { CKEY_TYPE_p           , CKEY_TYPE_P            },
 { CKEY_TYPE_bracketleft , CKEY_TYPE_braceleft    },
 { CKEY_TYPE_bracketright, CKEY_TYPE_braceright   },
 { CKEY_TYPE_backslash   , CKEY_TYPE_bar          },
 { CKEY_TYPE_a           , CKEY_TYPE_A            },
 { CKEY_TYPE_s           , CKEY_TYPE_S            },
 { CKEY_TYPE_d           , CKEY_TYPE_D            },
 { CKEY_TYPE_f           , CKEY_TYPE_F            },
 { CKEY_TYPE_g           , CKEY_TYPE_G            },
 { CKEY_TYPE_h           , CKEY_TYPE_H            },
 { CKEY_TYPE_j           , CKEY_TYPE_J            },
 { CKEY_TYPE_k           , CKEY_TYPE_K            },
 { CKEY_TYPE_l           , CKEY_TYPE_L            },
 { CKEY_TYPE_semicolon   , CKEY_TYPE_colon        },
 { CKEY_TYPE_apostrophe  , CKEY_TYPE_quotedbl     },
 { CKEY_TYPE_z           , CKEY_TYPE_Z            },
 { CKEY_TYPE_x           , CKEY_TYPE_X            },
 { CKEY_TYPE_c           , CKEY_TYPE_C            },
 { CKEY_TYPE_v           , CKEY_TYPE_V            },
 { CKEY_TYPE_b           , CKEY_TYPE_B            },
 { CKEY_TYPE_n           , CKEY_TYPE_N            },
 { CKEY_TYPE_m           , CKEY_TYPE_M            },
 { CKEY_TYPE_comma       , CKEY_TYPE_less         },
 { CKEY_TYPE_period      , CKEY_TYPE_greater      },
 { CKEY_TYPE_slash       , CKEY_TYPE_question     },
};

struct KeycodeChar {
  int  keycode;
  char c;
};

static KeycodeChar
keycode_char[] = {
 { CKEY_TYPE_Space        ,  ' ' },
 { CKEY_TYPE_Exclam       ,  '!' },
 { CKEY_TYPE_QuoteDbl     , '\"' },
 { CKEY_TYPE_NumberSign   ,  '#' },
 { CKEY_TYPE_Dollar       ,  '$' },
 { CKEY_TYPE_percent      ,  '%' },
 { CKEY_TYPE_ampersand    ,  '&' },
 { CKEY_TYPE_apostrophe   , '\'' },
 { CKEY_TYPE_parenleft    ,  '(' },
 { CKEY_TYPE_parenright   ,  ')' },
 { CKEY_TYPE_asterisk     ,  '*' },
 { CKEY_TYPE_plus         ,  '+' },
 { CKEY_TYPE_comma        ,  ',' },
 { CKEY_TYPE_minus        ,  '-' },
 { CKEY_TYPE_period       ,  '.' },
 { CKEY_TYPE_slash        ,  '/' },
 { CKEY_TYPE_0            ,  '0' },
 { CKEY_TYPE_1            ,  '1' },
 { CKEY_TYPE_2            ,  '2' },
 { CKEY_TYPE_3            ,  '3' },
 { CKEY_TYPE_4            ,  '4' },
 { CKEY_TYPE_5            ,  '5' },
 { CKEY_TYPE_6            ,  '6' },
 { CKEY_TYPE_7            ,  '7' },
 { CKEY_TYPE_8            ,  '8' },
 { CKEY_TYPE_9            ,  '9' },
 { CKEY_TYPE_colon        ,  ':' },
 { CKEY_TYPE_semicolon    ,  ';' },
 { CKEY_TYPE_less         ,  '<' },
 { CKEY_TYPE_equal        ,  '=' },
 { CKEY_TYPE_greater      ,  '>' },
 { CKEY_TYPE_question     ,  '?' },
 { CKEY_TYPE_At           ,  '@' },
 { CKEY_TYPE_A            ,  'A' },
 { CKEY_TYPE_B            ,  'B' },
 { CKEY_TYPE_C            ,  'C' },
 { CKEY_TYPE_D            ,  'D' },
 { CKEY_TYPE_E            ,  'E' },
 { CKEY_TYPE_F            ,  'F' },
 { CKEY_TYPE_G            ,  'G' },
 { CKEY_TYPE_H            ,  'H' },
 { CKEY_TYPE_I            ,  'I' },
 { CKEY_TYPE_J            ,  'J' },
 { CKEY_TYPE_K            ,  'K' },
 { CKEY_TYPE_L            ,  'L' },
 { CKEY_TYPE_M            ,  'M' },
 { CKEY_TYPE_N            ,  'N' },
 { CKEY_TYPE_O            ,  'O' },
 { CKEY_TYPE_P            ,  'P' },
 { CKEY_TYPE_Q            ,  'Q' },
 { CKEY_TYPE_R            ,  'R' },
 { CKEY_TYPE_S            ,  'S' },
 { CKEY_TYPE_T            ,  'T' },
 { CKEY_TYPE_U            ,  'U' },
 { CKEY_TYPE_V            ,  'V' },
 { CKEY_TYPE_W            ,  'W' },
 { CKEY_TYPE_X            ,  'X' },
 { CKEY_TYPE_Y            ,  'Y' },
 { CKEY_TYPE_Z            ,  'Z' },
 { CKEY_TYPE_bracketleft  ,  '[' },
 { CKEY_TYPE_backslash    , '\\' },
 { CKEY_TYPE_bracketright ,  ']' },
 { CKEY_TYPE_asciicircum  ,  '^' },
 { CKEY_TYPE_underscore   ,  '_' },
 { CKEY_TYPE_grave        ,  '`' },
 { CKEY_TYPE_a            ,  'a' },
 { CKEY_TYPE_b            ,  'b' },
 { CKEY_TYPE_c            ,  'c' },
 { CKEY_TYPE_d            ,  'd' },
 { CKEY_TYPE_e            ,  'e' },
 { CKEY_TYPE_f            ,  'f' },
 { CKEY_TYPE_g            ,  'g' },
 { CKEY_TYPE_h            ,  'h' },
 { CKEY_TYPE_i            ,  'i' },
 { CKEY_TYPE_j            ,  'j' },
 { CKEY_TYPE_k            ,  'k' },
 { CKEY_TYPE_l            ,  'l' },
 { CKEY_TYPE_m            ,  'm' },
 { CKEY_TYPE_n            ,  'n' },
 { CKEY_TYPE_o            ,  'o' },
 { CKEY_TYPE_p            ,  'p' },
 { CKEY_TYPE_q            ,  'q' },
 { CKEY_TYPE_r            ,  'r' },
 { CKEY_TYPE_s            ,  's' },
 { CKEY_TYPE_t            ,  't' },
 { CKEY_TYPE_u            ,  'u' },
 { CKEY_TYPE_v            ,  'v' },
 { CKEY_TYPE_w            ,  'w' },
 { CKEY_TYPE_x            ,  'x' },
 { CKEY_TYPE_y            ,  'y' },
 { CKEY_TYPE_z            ,  'z' },
 { CKEY_TYPE_braceleft    ,  '{' },
 { CKEY_TYPE_bar          ,  '|' },
 { CKEY_TYPE_braceright   ,  '}' },
 { CKEY_TYPE_asciitilde   ,  '~' },
};

#endif
